; Optimized Print-by-Character Screen Color Display Test

        DEVICE  ZXSPECTRUM48

        org $8000

; constants
STACK_POS       equ $FF50       ; near end of available memory
SCR_START       equ $4000       ; start of screen memory
SCR_RAM         equ $1800       ; total screen memory
ATR_START       equ $5800       ; start of screen attribute memory
ATR_RAM         equ $0300       ; total attribute memory
WAIT_TIME       equ $01         ; number of delay loops
AREA_CHAR       equ $0100       ; characters per area
NEXT_AREA       equ $0800       ; space until next area
COLORS  equ spbak-colormap      ; size of color map data block

; main routine
start:
        exx             ; swap registers
        push hl         ; store hl' for basic
        ld (spbak),sp   ; backup original stack
        ld sp,STACK_POS ; set custom program stack

        ld iy,colormap  ; set color pointer register
        ld b,COLORS     ; number of colors
        call color      ; color loop routine

        ld sp,(spbak)   ; restore system stack pointer
        pop hl          ; restore hl' for basic
        exx             ; swap registers
        ret

; program data
colormap:
        db $38,$01,$0A,$13,$1C,$25,$2E,$37      ; normal color cycle
        db $38,$41,$4A,$53,$5C,$65,$6E,$77      ; bright color cycle
        db $78,$07                              ; reset screen
spbak:
        dw 0            ; back up system stack pointer
spbuff:
        dw 0            ; back up program stack pointer

; color loop routine
color:
        push bc         ; store current loop
        call reset      ; reset screen
        ld hl,SCR_START ; set hl to start of screen memory
        ld b,3          ; number of areas
        call screen     ; run screen print routine
        inc iy          ; move to next color code
        pop bc          ; restore current loop
        djnz color      ; loop for the number of colors
        ret

; screen reset routine
reset:
        ld hl,ATR_START ; set hl to attribute buffer
        ld bc,ATR_RAM/2 ; set bc to ram size in words
        ld d,(iy)       ; load attribute pattern
        ld e,(iy)       ; load attribute pattern
        call fillram    ; fill attribute memory
        ld hl,SCR_START ; set hl to screen buffer
        ld bc,SCR_RAM/2 ; set bc to ram size in words
        ld de,$00       ; empty screen pattern
        call fillram    ; fill screen memory
        ret

; ram fill routine using stack
fillram:
        ; hl - start of memory block
        ; bc - number of words
        ; dc - word to write 
        ld (spbuff),sp  ; back up stack pointer
        add hl,bc
        add hl,bc       ; set hl to end of memory
        ld sp,hl        ; make memory block the stack
        ld a,$FF        ; fill a to check for underruns
ramloop:
        push de         ; push word
        dec c           ; decrement loop low byte
        jr nz,ramloop   ; loop until empty
        dec b           ; decrement high byte too
        cp b            ; check for underflow
        jp nz,ramloop   ; loop until empty
        ld sp,(spbuff)  ; restore stack pointer
        ret

; screen print routine
screen:
        push bc         ; store current loop
        push hl         ; store first line of area
        ld bc,AREA_CHAR ; number of characters per area
        ld a,$FF        ; store for checking underflow
        call area       ; run area print routine
        pop hl          ; restore first area character
        ld bc,NEXT_AREA ; stage next area differential
        add hl,bc       ; add distance to next area
        pop bc          ; restore current loop
        djnz screen     ; loop over 3 screen areas
        ret

; area print routine
area:
        push bc         ; store current loop
        push hl         ; store top line of character
        ld b,8          ; number of color runs
        call loop       ; run character print routine
        pop hl          ; restore top line of character
        pop bc          ; restore current loop
        inc hl          ; move to next character position
        dec bc          ; decrement loop counter
        ld a,b          ; prepare to compare high/low bytes
        or c            ; check if loop counter is zero
        jr nz,area      ; loop for all area characters
        ret

; main character print routine
loop:
        call wait       ; delay loop
        scf             ; set carry flag
        rr (hl)         ; rotate bits right with carry
        jr nc,loop      ; loop while carry is 0
        inc h           ; increment high bit
        djnz loop       ; loop for all 8 lines
        ret

; delay subroutine
wait:
        push bc         ; store current loop
        ld b,WAIT_TIME  ; set number of nops
waitloop:
        nop             ; do nothing
        djnz waitloop   ; loop for all nops
        pop bc          ; restore current loop
        ret        

; deploy snapshot file
        SAVESNA "fastscr.sna", start